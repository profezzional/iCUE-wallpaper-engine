Wallpaper Engine (WE)/iCUE integration:
	The end result is being able to automatically set all available LEDs from iCUE to the RGB value
	of the HTML color name in the accompanying text file.

	This was created with the intent to be able to control Corsair LEDs with Google Assistant, but
	anything you want to use should work; all that needs to happen is changing the color in the
	text file.

	This can also be used in conjunction with any other web wallpaper (see setup directions below).

How it works:
	Setting a web/html wallpaper with WE lets you control of Corsair LEDs using JavaScript (JS),
	thanks to WE's iCUE integration. While running a local HTTP server, the web wallpaper can
	repeatedly get the contents of a file from the server, which in this case contains a RGB value.
	This lets you indirectly automatically set the color value for your Corsair LEDs to any valid
	RGB value.

	Main Components:
		index.ts - Typescript (TS) file for running a local HTTP server using Node and Express
		wallpaper.ts - Typescript file for requesting file contents from the server

	Additional Files:
		wallpaper.html - HTML file to load into WE, to run the script in wallpaper.ts
		package.json - JSON file containing the dependencies needed to compile the TypeScript
					   files and run the Node commands
		tsconfig.json - JSON file with settings used for compiling the TS files
		readme.README - README file that you're reading right now, with all the directions

	Generated Files:
		index.js - (JS) version of index.ts, generated when index.ts is compiled, run by Node to
				   start the HTTP server
		wallpaper.js - JS version of wallpaper.ts, generated when wallpaper.js is compiled, 
					   referenced by wallpaper.html
		package-lock.json - JSON file with metadata about the node modules installed
		node_modules/* - all the dependencies needed for Typescript compilation and running the
						 HTTP server, created after running 'npm install'

Prerequisites:
	- install Node globally on your system (at least the latest version as of 5/27/2019)
		- the Node version probably doesn't matter, as long as you don't go TOO far back;
		  there's nothing fancy going on that requires the latest version or anything
	- have Wallpaper Engine installed (at least the latest version as of 5/27/2019)
		- this *should* work all the way back to the iCUE integration update, whenever that was,
		  but just use the most recent version to be safe

Normal Setup:
	1. run 'npm install' in a command prompt from this folder
	2. run 'npm build-start' in the same command prompt
		- this compiles the TS files into JS and starts the HTTP server; after this you should see
		  that the HTTP server is listening on whatever port is set in index.ts
	3. run iCUE and ensure that 'Enable SDK' is checked in the settings
		- note: iCUE must be running before WE so that the integration works correctly
	4. run WE -> 'open from file' -> navigate to and select wallpaper.html
	5. go to colors.txt and enter any HTML color name
		- see wallpaper.ts for the list
		- entering invalid input won't damage your system; it'll just make all the LEDs black by
		  default
	6. either modify the text file manually or run your other program to modify it automatically

Debugging/Developer Further Setup:
	7. in your WE settings under 'General', set your CEF devtools port (something reasonable like
	   4200 or 8080 is recommended)
	8. go to http://localhost:[port] (only tested in Chrome) and select index.html
	9. assuming you did the above WE-related steps correctly, it should take you to DevTools
		- if at some point you end up closing WE, after you reopen WE, go back to the normal
		  localhost page and get back to DevTools; clicking the 'Reconnect DevTools' button doesn't
		  always work
	10. you should see some logs in the Console
	11. if you modify any of the wallpaper files, the easiest way I found for forcing WE (and
		DevTools by extension) is assigning a hotkey to the wallpaper in WE (I used ctrl+r)
		- this is after re-compiling the TS if you modified any of the TS files

Notes:
	- as of 5/27/2019, doesn't work for Dark Core RGB
	  (see http://forum.corsair.com/v3/showthread.php?p=999357)
	- logs a lot of errors if the server isn't running or if the file is not found (not being able
	  to catch network errors in Chrome makes error-handling rough)
	- 'enable full software control' must be checked in iCUE settings for Vengeance RGB Pro RAM
	  modules (this takes up more CPU)
	- to use this in conjunction with other web wallpapers in WE, just include the script tag from
	  wallpaper.html in your web wallpaper html file, and the script should run independently of
	  the rest of the wallpaper
